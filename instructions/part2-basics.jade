
section.intro.chapter.white(data-background="intro_images/grunge_red.jpg")
  h1 Part 2
    b The Basics


section.intro.green(data-background="#134")
  h1 Time to 
    b REPL 
    | with Scala



section(data-state="h_shell")
  style.
    .h_shell header:after{ content: "Scala REPL and SBT Shell"; }
  aside.notes a story of two shells. Note the different prompts
  img(src="instruction_images/shell1.jpg")



section(data-state="h_shell")
  aside.notes Today we will launch the Scala repl as an internal console in SBT
  img(src="instruction_images/shell2.jpg")



section.intro.green(data-background="#134")
  h1 Are we ready to 
    br
    b REPL ?



section
  pre
    code(data-trim, contenteditable).syntax println("Hello, Scala")


section(data-background="instruction_images/repl_hello.png")


section
  pre
    code(data-trim, contenteditable).syntax "Hello, Scala"


section(data-background="instruction_images/repl_hello_res0.png")

section(data-background="instruction_images/repl_hello_res0_info.png")



section(data-state="h_strings")
  style.
    .h_strings header:after{ content: "Strings"; }
  pre
    code(data-trim, contenteditable).
      "Hello, " + "World"
    br  
    code(data-trim, contenteditable).fragment.
      "Hello, World" == "Hello, World"
    br  
    code(data-trim, contenteditable).fragment.
      "Hello, World".size
    br  
    code(data-trim, contenteditable).fragment.
      "Hello, World".replaceAll("W.*", "Java")
      


section(data-state="h_multiline_strings")
  style.
    .h_multiline_strings header:after{ content: "Multiline Strings"; }
  pre
    code(data-trim, contenteditable).
      """ 
          Hello, 

           World

      """
    br  
    br  
    code(data-trim, contenteditable).fragment.
      html.replaceAll("""&lt;/?[^&gt;]+&gt;""")
      



section(data-state="h_moretypes").left
  style.
    .h_moretypes header:after{ content: "More Types"; }
  code(data-trim, contenteditable) 12
  code(data-trim, contenteditable).fragment : Int
  br
  br
  code(data-trim, contenteditable).fragment 3.1416
  code(data-trim, contenteditable).fragment : Double
  br
  br
  code(data-trim, contenteditable).fragment true
  code(data-trim, contenteditable).fragment : Boolean
  br
  br
  code(data-trim, contenteditable).fragment List(1, 3, 20)
  code(data-trim, contenteditable).fragment : List[Int]
      


section.left
  code(data-trim, contenteditable) List(1, 3, 20): List[Int]
  br
  br
  code(data-trim, contenteditable).fragment List('a', 'b', 'c')
  code(data-trim, contenteditable).fragment : List[Char]
  br
  br
  code(data-trim, contenteditable).fragment List("hi", "there")
  code(data-trim, contenteditable).fragment : List[String]
  br
  br
  code(data-trim, contenteditable).fragment List(x: A, y: A, z: A)
  code(data-trim, contenteditable).fragment : List[A]



section.intro.green(data-background="#136")
  h1 <b>Generics</b>
  p(style="color: white; padding-top: 0;") defn: Code or data that takes a type as a parameter<br>specifying a type to use at runtime
  br
  p(style="color: white; padding-top: 0;").fragment List[A] 
    span.fragment could be List[Int] or List[Char] or List[String]
  p(style="color: white; padding-top: 0;").fragment or List[List[Int]]



section(data-state="h_lists")
  style.
    .h_lists header:after{ content: "Lists"; }
  pre
    code(data-trim, contenteditable).
       List(1, 2) :+ 3
    br  
    code(data-trim, contenteditable).fragment.
      List(1, 2) ++ List(3, 4)
    br  
    code(data-trim, contenteditable).fragment.
      List(3.24, 9.54, 0.32).size
    br  
    code(data-trim, contenteditable).fragment.
      List(2, 4, 1, 3).sorted



section(data-state="h_typetable", style="text-align: center;")
  style .h_typetable header:after{content:"Scala Types"}
  br
  table
    tr
      th Name 
      th Description
      th Example
    tr
      td Any
      td Base type
      td 
        code n/a
    tr
      td Boolean
      td Either true or false
      td 
        code false
    tr
      td Char
      td Unicode character
      td 
        code 'A'
    tr
      td Double
      td 4-byte floating point
      td 
        code 9.23
    tr
      td Int
      td 4-byte integer
      td 
        code 10
    tr
      td List
      td Sequence of items
      td 
        code List(1,2,3)
    tr
      td Long
      td 8-byte integer
      td 
        code 327L
    tr
      td String
      td Text
      td 
        code "Hello"




section(data-state="h_value")
  style.
    .h_value header:after{ content: "Syntax: Defining A Value"; }
  pre
    code(data-trim, contenteditable).syntax.
      val identifier[: type] = expression
  br
  pre
    code(data-trim, contenteditable).fragment.
      val count = 20 + 5
      val eolChar = '|'
      val names = List("Oona", "Lily")


section(data-state="h_value")
  style.
    .h_value header:after{ content: "Syntax: Defining A Value"; }
  pre
    code(data-trim, contenteditable).syntax.
      val identifier[: type] = expression
  br
  pre
    code(data-trim, contenteditable).
      val count: Int = 20 + 5
      val eolChar: Char = '|'
      val names: List[String] = List("Oona", "Lily")



//- section(data-state="h_var")
//-   style.
//-     .h_var header:after{ content: "Syntax: Defining A Variable"; }
//-   pre
//-     code(data-trim, contenteditable).
//-       var identifier[: type] = expression
//-   br
//-   pre
//-     code(data-trim, contenteditable).fragment.
//-       var count = 20 + 5
//-       count -= 12
//-       count = count * 2


//- section(data-state="h_var")
//-   pre
//-     code(data-trim, contenteditable).
//-       var identifier[: type] = expression
//-   br
//-   pre
//-     code(data-trim, contenteditable).
//-       var count: Int = 20 + 5
//-       count -= 12
//-       count = count * 2



section.intro.green(data-background="#621")
  h1 That was <b>Types</b> & <b>Values</b>


section.intro.darkBlue(data-background="#ee3")
  h1 How about we 
    b try out
    |  your new skills?

