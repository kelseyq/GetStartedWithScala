

section.intro.chapter.white(data-background="intro_images/grunge_red.jpg")
  h1 Part 4
    b Functions


section.intro.red(data-background="#125")
  h1 What is a 
    b Function
    |  anyways?

    
section.intro.green(data-background="#136")
  h1 <b>Function</b>
  p.white(style="padding-top: 0;") defn: An expression with a name & input parameters


section(data-state="h_function")
  style.
    .h_function header:after{ content: "Syntax: Functions"; }
  pre
    code(data-trim, contenteditable).syntax.
      def name = expression
    br
    br
    br
    code(data-trim, contenteditable).fragment.
      def greeting = "Hello, World"
      val message = greeting + ", here I am!"

      println(message)


section(data-state="h_function")
  pre
    code(data-trim, contenteditable).syntax.
      def name = expression
    br
    br
    br
    code(data-trim, contenteditable).
      def greeting = "Hello, World"
      def message = greeting + ", here I am!"

      println(message)

 


section(data-state="h_function")
  pre
    code(data-trim, contenteditable).syntax.
      def name[: type] = expression
    br
    br
    br
    code(data-trim, contenteditable).
      def greeting: String = "Hello, World"
      def message: String = greeting + ", here I am!"

      println(message)




section.intro.green(data-background="#134")
  h1 Are Function Parameters <b>Optional?</b>



section
  pre
    code(data-trim, contenteditable).
      def greeting = "Hello, World"
      val message = greeting + ", here I am!"

    br
    code(data-trim, contenteditable).fragment.
      def greeting() = "Hello, World"
      val message = greeting() + ", here I am!"



 
section(data-state="h_function")
  pre
    code(data-trim, contenteditable).syntax.
      def name(name1: type1[, ]) = expression
    br
    br
    code(data-trim, contenteditable).
      def hello(name: String) = "Hello, " + name
      val message = hello("World")
 


section
  pre
    code(data-trim, contenteditable).
      val now = System.currentTimeMillis
      val seconds = now / 1000
      "Num seconds since 1970 = " + seconds

 

section
  pre
    code(data-trim, contenteditable).
      {
        val now = System.currentTimeMillis
        val seconds = now / 1000
        "Num seconds since 1970 = " + seconds
      }

 

section
  pre
    code(data-trim, contenteditable).
      def numSeconds: String = {
        val now = System.currentTimeMillis
        val seconds = now / 1000
        "Num seconds since 1970 = " + seconds
      }
    br
    code(data-trim, contenteditable).fragment.
      val since1970: String = numSeconds()


section
  pre
    code(data-trim, contenteditable).
      val since1970: String = {
        val now = System.currentTimeMillis
        val seconds = now / 1000
        "Num seconds since 1970 = " + seconds
      }


section
  pre
    code(data-trim, contenteditable).
      def numSeconds(then: Long): String = {
        val now = System.currentTimeMillis
        val seconds = (now - then) / 1000
        "Num seconds since then = " + seconds
      }
    br
    code(data-trim, contenteditable).fragment.
      val sinceMay2014 = numSeconds(1400000000000L)


section.intro.green(data-background="#134")
  h1 Functions Are <b>Expressions</b>
  p.white(style="padding-top: 0;").fragment with names
  p.white(style="padding-top: 0;").fragment and inputs



section.intro.green(data-background="#134")
  h1 Now You Know 
    b Functions



section.intro.darkBlue(data-background="#ee3")
  h1 How about we 
    b try out
    |  your new skills?











