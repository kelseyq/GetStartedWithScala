

section.intro.chapter.white(data-background="intro_images/grunge_red.jpg")
  h1 Part 6
    b FP



section.intro.green(data-background="#136")
  h1 
    b Functional Programming
  br
  p(style="color: white; padding-top: 0;") defn: 
    span.fragment A declarative, function-based approach to programming



section.intro.red(data-background="#125")
  aside.notes you already know that a function is a named, parameterized expression
  h1 Functions are 
    b Expressions


section.intro.red(data-background="#125")
  aside.notes However, did you also know this? 
    | What does this mean?
  h1 Functions are 
    i also
    br
    b Data
    

section
  aside.notes If a function is data, I should be able to store it in a value and then invoke it. Or copy it as I please. Or even pass it to a function.
  pre
    code(data-trim, contenteditable).syntax.
      val myFunction
      myFunction()
    br 
    br 
    code(data-trim, contenteditable).fragment.syntax.
      val myCopy = myFunction
      myCopy()
    br 
    br 
    code(data-trim, contenteditable).fragment.syntax.
      def invoke(someFunction) = someFunction()
      invoke( myCopy )


section.intro.green(data-background="#134")
  h1 What does this 
    b imply?



section.intro.red(data-background="#125")
  aside.notes Based on this, it should be apparent that we can store and copy functions
  h1 Functions as data are <br>
    b Storable
    
section.intro.red(data-background="#125")
  aside.notes and pass them to other functions
  h1 Functions as data are <br>
    b Passable
    
section.intro.red(data-background="#125")
  aside.notes and treat them as typed data
  h1 Functions as data are <br>
    b Typed



section.intro.red(data-background="#125")
  aside.notes One wonders...
  h1 If Scala data has a <br>
    b Type...
    

section.intro.green(data-background="#134")
  h1 What is the 
    b type 
    | of a function? 



section
  aside.notes Here is a simple function. How would you describe it in terms of types? It has an input and an output type, is that enough? It turns out all you really need are the input types, the output types and their relation
  pre
    code(data-trim, contenteditable).
      def buzz(x: Int): String = {
        "the value is " + x
      }
    br
    br
    code(data-trim, contenteditable).fragment.
      val fizz: (Int) => String = buzz
    br
    br
    code(data-trim, contenteditable).fragment.
      fizz(3)

section(data-state="h_fun_types")
  aside.notes The formal syntax for a function's type is about the inputs and outputs, which is why a function stored in a value is only known by its types
  style.
    .h_fun_types header:after{ content: "Syntax: Function Types"; }
  pre
    code(data-trim, contenteditable).syntax.
      (type[, type, ...]) => output-type
    br
    br  
  pre
    code(data-trim, contenteditable).fragment.
      def hello(name: String) = "Hello, " + name
      val h: String => String = hello
      h("World")


section.intro.green(data-background="#134") 
  h1 Wait, it gets even 
    b Easier


section(data-state="h_anon_fun")
  aside.notes You don't really need to point to other functions. Just create new ones inline
  style.
    .h_anon_fun header:after{ content: "Syntax: Inline Functions"; }
  pre
    code(data-trim, contenteditable).syntax.
      (input parameters) => expression
    br
    br  
  pre
    code(data-trim, contenteditable).fragment.
      // def hello(name: String) = "Hello, " + name
      // val h: String => String = hello

      val h = (name: String) => "Hello, " + name
      h("World")
    br
    code(data-trim, contenteditable).fragment.
      val l = (name: String) => {
          val nameLength = name.length
          "Your name is " + nameLength + " letters long!"
      }


section.intro.green(data-background="#134") 
  aside.notes Ok, thanks for being patient, let's put this knowledge to use. What haven't we covered yet? Loops
  h1 So... 
    br
    b What?

section
  aside.notes Here is a for loop in Scala (quick breakdown)
  pre
    code(data-trim, contenteditable).
      def makePies: List[String] = {
        val fruits = List("apple", "cherry", "rhubarb")
        val changedFruits = 
          new scala.collection.mutable.ListBuffer[String]
        for (i &lt;- 0 until fruits.length) {
            changedFruits += (fruits(i) + " pie")
        }
        changedFruits.result
      }

section
  pre
    code(data-trim, contenteditable).
      def makeJuice: List[String] = {
        val fruits = List("apple", "orange", "cranberry")
        val changedFruits = 
          new scala.collection.mutable.ListBuffer[String]
        for (i &lt;- 0 until fruits.length) {
            changedFruits += (fruits(i) + " juice")
        }
        changedFruits.result
      }

section
  aside.notes In the spirit of DRY, what changes? Let's abstract that away
  pre
    code(data-trim, contenteditable).
      def freezeFruit: List[String] = {
        val fruits = List("strawberry", "blueberry", "grape")
        val changedFruits = 
          new scala.collection.mutable.ListBuffer[String]
        for (i &lt;- 0 until fruits.length) {
            changedFruits += ("frozen " + fruits(i))
        }
        changedFruits.result
      }

section(data-state="h_firstclass").left
  aside.notes What would the interface look like?
  style.
    .h_firstclass header:after{ content: "map"; }
  code(data-trim, contenteditable) (list of parameters' types) => return type
  br
  br
  code(data-trim, contenteditable).fragment (String) => String
  br
  br
  pre
    code(data-trim, contenteditable).fragment 
     | def map(fruitList:List[String], 
     |         theFunction: (String) => String): List[String]

section(data-state="h_mapimpl").left
  style.
    .h_mapimpl header:after{ content: "map"; }
  pre
    code(data-trim, contenteditable).
      def map(fruits: List[String], 
          theFunction: (String) => String): List[String] = {
          val newList = 
            new scala.collection.mutable.ListBuffer[String]
          for (i &lt;- 0 until fruits.length) {
              newList += theFunction(fruits(i))
          }   
          newList.result      
      }

section(data-state="h_mapimpl").left
  style.
    .h_mapimpl header:after{ content: "map"; }
  pre
    code(data-trim, contenteditable).
      val makePie = { (fruit: String) => fruit + " pie" }
      val freezeFruit = { (fruit: String) => "frozen " + fruit }
      val fruits = List("apple", "cherry", "peach")

      map(fruits, makePie) 
        //List("apple pie", "cherry pie", "peach pie")
      map(fruits, freezeFruit) 
        //List("frozen apple", "frozen cherry", "frozen peach")

section(data-state="h_mapimpl").left
  aside.notes Do we have to write map() over and over?
  style.
    .h_mapimpl header:after{ content: "map"; }
  pre
    code(data-trim, contenteditable).
      def measureFruit: List[Int] = {
        val fruits = List("apple", "orange", "cranberry")
        val changedFruits = 
          new scala.collection.mutable.ListBuffer[Int]
        for (i &lt;- 0 until fruits.length) {
            changedFruits += fruits(i).length
        }
        changedFruits.result
      }

section(data-state="h_mapimpl").left
  aside.notes Generics. Vector, map, linkedlist?
  style.
    .h_mapimpl header:after{ content: "map"; }
  pre
    code(data-trim, contenteditable).
      def map[I, O](inputList: List[I], 
          theFunction: (I) => O): 
          List[O] = {
          val outputList = 
            new scala.collection.mutable.ListBuffer[O]
          for (i &lt;- 0 until inputList.length) {
              outputList += theFunction(inputList(i))
          }   
          outputList.result      
      }

section(data-state="h_mapimpl").left
  aside.notes Stress this is a std library function
  style.
    .h_mapimpl header:after{ content: "map"; }
  pre
    code(data-trim, contenteditable).
      abstract class Collection[A] {
          ...
          def map(theFunction: (A) => B): Collection[B] = 
          ...
      }

      fruitList.map(makePies)
      fruitList.map( (fruit: String) => fruit.length )

section.intro.darkBlue(data-background="#ee3")
  h1 exercise break
    |!!!

section
  h3 First Class Functions
  ol 
    li Change 
     code /clouds 
     | to print out all the cloud names in uppercase using .map
     ul
      li Hint: String has a 
        code .toUpperCase() 
        | method

section.intro.green(data-background="#134") 
  aside.notes Why is this important? FP
  h1 So... 
    br
    b What?

section.intro.green(data-background="#136")
  aside.notes Math def. Black box. point out our functions hold this property
  img(src="instructions/images/function_machine_f.png" height=450)
  br
  p(style="color: white;") A function is a relation between values where each of its input values gives back exactly one output value

section.intro.red(data-background="#125")
  aside.notes unit testing, debugging, correctness
  h1.intro Functions are
  h1 
    b Deterministic
  p(style="color: white;").fragment You will always get the same result if you run them with the same data.

section.intro.red(data-background="#125")
  aside.notes black box. readability, reuse, refactoring
  h1.intro Functions are
  h1 
    b Encapsulated
  p(style="color: white;").fragment The interface is all you need to know about a function's behavior.

section.intro.red(data-background="#125")
  aside.notes parallelization, concurrency, lazy evaluation
  h1.intro Functions are
  h1 
    b Commutative
  p(style="color: white;").fragment The order of evaluation doesn't matter.

section
  aside.notes do we have to do the first two lines in the same order? do the same computers have to do them? when do they have to be done?
  pre
    code(data-trim, contenteditable).
      val firstThing = doOneThing()
      val secondThing = doAnotherThing()

      val thirdThing = doTheLastThing(firstThing, secondThing)
    br

section.intro.red(data-background="#125")
  aside.notes great for concurrency (inherently threadsafe), great for rollback of data, makes lots of work simpler
  h1.intro Data is
  h1 
    b Immutable
  p(style="color: white;").fragment 
    | Once an object is created, it cannot be changed.
    br
    | If you need to change an object, make your own copy.

section.intro.red(data-background="#621") 
  aside.notes This is why I really like Scala
  h1 
    b This 
    | is why I just 
    b &hearts; Scala


section(data-state="h_reducing")
  aside.notes Let's reduce a list down to a single value
  style.
    .h_reducing header:after{ content: "reduce()"; }
  pre
    code(data-trim, contenteditable).
      List(1, 2, 3).reduce( (sum, i) => sum + i )
    code(data-trim, contenteditable).fragment.
      // 6

section(data-state="h_reducing")
  aside.notes This time I'll use curly braces and made this look more like a real function. You can use either parentheses or curly braces when passing function literals. So, what does this return?
  pre
    code(data-trim, contenteditable).
      List(29, 16, 72, 13).reduce { (max, i) => 
        if (max &lt; i) i else max
      }
    code(data-trim, contenteditable).fragment.
      // 72




section(data-state="h_filtering")
  aside.notes Finally, lets do some filtering
  style.
    .h_filtering header:after{ content: "filter()"; }
  pre
    code(data-trim, contenteditable).
      List(1, 2, 3).filter( i => i &lt; 3 )
    code(data-trim, contenteditable).fragment.
      // List(1, 2)


section(data-state="h_filtering")
  aside.notes Let's try our case class example again
  pre
    code(data-trim, contenteditable).
      case class User(id: Long, name: String)

      val users = List( User(23, "Kaylee"), 
        User(42, "Wash"), User(12, "Jayne") )

      users.filter( u => u.name == "Wash" )
    code(data-trim, contenteditable).fragment.
      // List(User(42,Wash))



section.intro.green(data-background="#134") 
  aside.notes So then....
  h1 
    b That 
    | was map(), reduce() & filter()



section.intro.darkBlue(data-background="#ee3")
  h1 How about we 
    b try out
    |  your new skills?
