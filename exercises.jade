
section
  h3 Exercises
  h3 Here We Go


section
  h3 Does this work?
  ol
    li Download the project
      p http://www.bks2.com/scala-tutorial.tar.bz2
    li Run "./sbt" at the command line in the project folder
    li Once ">" appears, run "compile" to build the project
    li Success!

section
  style.
    .h_exercises header:after{ content: "Exercises"; }
  h3 Types and Values
  ol
    li Store your own name as a value
    li Store the name of the person sitting next to you as a value
    li Store your name + your neighbors' names in a list
    li Ask two people sitting near you what age they started programming
    li Find the average age that all of you started programming, without rounding
    li Create a map of name to age they started programming

section
  h3 Expressions
  ol
    li Type ":q" to exit out of the REPL back into sbt
    li At the sbt prompt, run "container:start" to start the server
    li Run "~ ;copy-resources;aux-compile" to automatically recompile & restart when you make changes
    li Open the sample project in the text editor of your choice
    li Confirm the server is working by changing line 19 of 
      code   TutorialApp 
      | to hello something else & verifying localhost:8080/ has changed in the browser

section
  h3 Expressions
  ol
    li Modify the 
      code /smalltalk 
      | endpoint code to operate on an integer representing the temperature
    ul
        li Use .toInt to convert the parameter to an int
    li Add a default to 
      code /moreSmalltalk 
      | that returns "Yup, sure is FOO" where FOO is the value of the weather param
    li Implement
      code /highLow
      ol
       li Use pattern matching with value binding to extract the high & low temp
       li Use guards to validate the data 

section
  h3 Functions
  ol
    li Complete the 
      code convertToF 
      | endpoint
    li Refactor your code from the 
      code /smalltalk 
      | endpoint to call a function

section
  h3 Classes
  ol
    li Add a field of your choosing to the 
      code Cloud 
      | case class
    li Create an object outside of 
      code TutorialApp  
      | with a 
      code convertFeetToMeters 
      | method
    li Add a method to 
      code Cloud 
      | that uses the object's method to return the cloud's height in meters

section
  h3 Functions
  ol 
    li Change 
     code /clouds 
     | to print out all the cloud names in uppercase using .map
     ul
      li Hint: String has a 
        code .toUpperCase() 
        | method

section
  h3 Functions
  ol 
    li Implement 
      code /averageTemp 
      | (average temperature for a city)
    li Implement 
      code /maxTemp 
      | (maximum temperature for a given date)
 
section
  h3 Putting it all together
  ol 
    li Come up with an query of your choice on the weather data and implement an endpoint for it
    ul
      li Ideas:
        ul
          li Standard deviation of high temps for a city
          li Average range of temperature
          li Use a simple linear model to forecast tomorrow's weather
    li Add a field to 
      code WeatherRecord 
      | representing inches of rainfall. Modify 
      code WeatherService 
      | to handle both csv entries with the rainfall field and without

section
  h4 THE END
  h3 Thanks!
