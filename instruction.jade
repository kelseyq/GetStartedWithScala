doctype 5

section.intro.white(data-background="#245")
  h1 Getting 
    b Started  
    | with 
    b Scala


section
  h2 Part 1
  h1 Introduction


// Some of the items we'll cover
// The language, and the Java Virtual Machine it's based on
// Functions are another type of data, like Javascript
// Specifying a variable's type at compile time & templated data structures
// Or not using variables, but fixed values everywhere
section
  p.big The Scala Language
  p.big.fragment The Java Virtual Machine
  p.big.fragment First-Class Functions
  p.big.fragment Static Types & Generics
  p.big.fragment Immutable Data
  p.big.fragment Pattern Matching



section.intro.green(data-background="#134")
  h1 We Have <b>So Much</b> To Cover Today

//- section.intro.red(data-background="#013")
//-   h1 We Have <b>So Much</b> To Cover Today


// Let's start out with Java's features
section.imgleft
  img(src="instruction_images/java.jpg")
  ul
    li Compiled
    li.fragment Object-Oriented
    li.fragment Static Types
    li.fragment Fast 
      span.fragment (eventually)
    li.fragment



section.imgleft
  img(src="instruction_images/pizza.jpg")
  ul
    li + Generic Types
    li.fragment + Optimizing Compiler
    li.fragment + First-Class Functions
    li.fragment + Pattern Matching
    li.fragment


section.imgleft
  img(src="instruction_images/java15.jpg")
  ul
    li Generic Types
    li.fragment Optimizing Compiler
    li.fragment.strike First-Class Functions
    li.fragment.strike Pattern Matching
    li.fragment

// Given that many of the features didn't make it into Java, he embarked on creating a new JVM language that would feature them all
section.imgleft
  img(src="instruction_images/scala_java.jpg")
  ul
    li First-Class Functions
    li.fragment Pattern Matching
    li.fragment Immutable Data
    li.fragment Awesome New Language
    li.fragment

// Before we dive into the official instruction, let's see what this "awesome" is about. First, variables
section
  h3 Java
  pre
    code.big(data-trim, contenteditable).
      String name = "Phil";
  div(style="height: 80px;")
  .fragment
    h3 Scala    
    pre
      code.big(data-trim, contenteditable).
        var name: String = "Phil";

section
  h3 Java
  pre
    code.big(data-trim, contenteditable).
      String name = "Phil";
  div(style="height: 80px;")
  h3 Scala    
  pre
    code.big(data-trim, contenteditable).
        var name: String = "Phil"



// As part of writing an optimizing compiler, he realized that a compiler can infer data types
section
  h3 Java
  pre
    code.big(data-trim, contenteditable).
      String name = "Phil";
  div(style="height: 80px;")
  h3 Scala    
  pre
    code.big(data-trim, contenteditable).
      var name         = "Phil"


// Java has a "final" addon keyword, but Scala has immutable data as an equal counterpart to variables
section
  h3 Java
  pre
    code.big(data-trim, contenteditable).
      final String name = "Phil";
  div(style="height: 80px;")
  .fragment
    h3 Scala    
    pre
      code.big(data-trim, contenteditable).
        val name: String = "Phil";

// Again, you may not need the semi-colon or type
section
  h3 Java
  pre
    code.big(data-trim, contenteditable).
      final String name = "Phil";
  div(style="height: 80px;")
  h3 Scala    
  pre
    code.big(data-trim, contenteditable).
      val name         = "Phil"



// Finally lets compare functions.
section
  h3 Java
  pre
    code.big(data-trim, contenteditable).
      int doubler(int amount) { 
        return amount * 2; 
      }
  div(style="height: 80px;")
  .fragment
    h3 Scala    
    pre
      code.big(data-trim, contenteditable).
        def doubler(amount: Int): Int = {
          return amount * 2
        }


// Return
section
  h3 Java
  pre
    code.big(data-trim, contenteditable).
      int doubler(int amount) { 
        return amount * 2; 
      }
  div(style="height: 80px;")
  h3 Scala    
  pre
    code.big(data-trim, contenteditable).
        def doubler(amount: Int): Int = {
          amount * 2
        }



// The braces are nice, but not necessary for a single line
section
  h3 Java
  pre
    code.big(data-trim, contenteditable).
      int doubler(int amount) { 
        return amount * 2; 
      }
  div(style="height: 80px;")
  h3 Scala    
  pre
    code.big(data-trim, contenteditable).
      def doubler(amount: Int): Int = amount * 2
       
       

// Neither is the return type if Scala can figure it out
section
  h3 Java
  pre
    code.big(data-trim, contenteditable).
      int doubler(int amount) { 
        return amount * 2; 
      }
  div(style="height: 80px;")
  h3 Scala    
  pre
    code.big(data-trim, contenteditable).
      def doubler(amount: Int) = amount * 2
       
       

section.intro.red(data-background="#125")
  h1 Scala is 
    b Opaque
    
section.intro.red(data-background="#125")
  h1 Scala is 
    b.strike Opaque

section.intro.red(data-background="#125")
  h1 Scala is 
    b Object Oriented
    
section.intro.red(data-background="#125")
  h1 Scala is 
    b Type Safe
    
section.intro.red(data-background="#125")
  h1 Scala is 
    b Expressive
    
section.intro.red(data-background="#125")
  h1 Scala is built for
    b Speed
    
section.intro.red(data-background="#125")
  h1 Scala is built for
    b Performance
    
section.intro.red(data-background="#125")
  h1 Scala is built for
    b Productivity
    


section.intro.green(data-background="#134")
  h1 Okay, that's enough about <b>Scala</b>
    
section.intro.green(data-background="#134")
  h1 Now let's learn some <b>Scala</b>
    
    



section
  h2 Part 2
  h1 Language Basics









