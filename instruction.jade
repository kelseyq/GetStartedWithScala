doctype 5

section
  h3 Get Started Developing With 
    b Scala


section
  h2 Part 1
  h1 Introduction


// Some of the items we'll cover
// The language, and the Java Virtual Machine it's based on
// Functions are another type of data, like Javascript
// Specifying a variable's type at compile time & templated data structures
// Or not using variables, but fixed values everywhere
section
  p.big The Scala Language
  p.big.fragment The Java Virtual Machine
  p.big.fragment First-Class Functions
  p.big.fragment Static Types & Generics
  p.big.fragment Immutable Data
  p.big.fragment Pattern Matching



section.intro(data-background="#013")
  h1 We Have <b>So Much</b> To Cover Today


// Let's start out with Java's features
section.imgleft
  img(src="instruction_images/java.jpg")
  ul
    li Compiled
    li.fragment Object-Oriented
    li.fragment Static Types
    li.fragment Fast 
      span.fragment (eventually)
    li.fragment



section.imgleft
  img(src="instruction_images/pizza.jpg")
  ul
    li + Generic Types
    li.fragment + Optimizing Compiler
    li.fragment + First-Class Functions
    li.fragment + Pattern Matching
    li.fragment


section.imgleft
  img(src="instruction_images/java15.jpg")
  ul
    li Generic Types
    li.fragment Optimizing Compiler
    li.fragment.strike First-Class Functions
    li.fragment.strike Pattern Matching
    li.fragment

// Given that many of the features didn't make it into Java, he embarked on creating a new JVM language that would feature them all
section.imgleft
  img(src="instruction_images/scala_java.jpg")
  ul
    li First-Class Functions
    li.fragment Pattern Matching
    li.fragment Immutable Data
    li.fragment Awesome New Language
    li.fragment

// Before we dive into the official instruction, let's see what this "awesome" is about. First, variables
section
  h3 Java
  pre
    code.big(data-trim, contenteditable).
      String name = "Phil";
  div(style="height: 80px;")
  .fragment
    h3 Scala    
    pre
      code.big(data-trim, contenteditable).
        var name: String = "Phil"

// As part of writing an optimizing compiler, he realized that a compiler can infer data types
section
  h3 Java
  pre
    code.big(data-trim, contenteditable).
      String name = "Phil";
  div(style="height: 80px;")
  h3 Scala    
  pre
    code.big(data-trim, contenteditable).
      var name         = "Phil"


// Java has a "final" addon keyword, but Scala has immutable data as an equal counterpart to variables
section
  h3 Java
  pre
    code.big(data-trim, contenteditable).
      final String name = "Phil";
  div(style="height: 80px;")
  .fragment
    h3 Scala    
    pre
      code.big(data-trim, contenteditable).
        val name: String = "Phil"


section
  h3 Java
  pre
    code.big(data-trim, contenteditable).
      final String name = "Phil";
  div(style="height: 80px;")
  h3 Scala    
  pre
    code.big(data-trim, contenteditable).
      val name         = "Phil"



// Finally lets compare function.
section
  h3 Java
  pre
    code.big(data-trim, contenteditable).
      int doubler(int amount) { 
        return amount * 2; 
      }
  div(style="height: 80px;")
  .fragment
    h3 Scala    
    pre
      code.big(data-trim, contenteditable).
        def doubler(amount: Int): Int = {
          amount * 2
        }



section
  h3 Java
  pre
    code.big(data-trim, contenteditable).
      int doubler(int amount) { 
        return amount * 2; 
      }
  div(style="height: 80px;")
  h3 Scala    
  pre
    code.big(data-trim, contenteditable).
      def doubler(amount: Int): Int = amount * 2


section
  h3 Java
  pre
    code.big(data-trim, contenteditable).
      int doubler(int amount) { 
        return amount * 2; 
      }
  div(style="height: 80px;")
  h3 Scala    
  pre
    code.big(data-trim, contenteditable).
      def doubler(amount: Int) = amount * 2






section
  h3 Java
  pre
    code.big(data-trim, contenteditable).
      final String name = "Phil";
  div(style="height: 80px;")
  h3 Scala    
  pre
    code.big(data-trim, contenteditable).
      val name         = "Phil"












section
  pre
    code(data-trim, contenteditable).
      def getStatusMessage(status: Int): String = {
        var msg = status match {
          case 200 => "ok"
          case 500 => "error"
          case _   => throw new Exception(s"$status was unexpected")
        }
        println(s"Returning '$msg' for: $status")
        msg
      }




section
  pre
    code(data-trim, contenteditable).
      def getStatusMessage(status: Int): String = {
        var msg = status match {
          case 200 => "ok"
          case 500 => "error"
          case _   => throw new Exception(s"$status was unexpected")
        }
        println(s"Returning '$msg' for: $status")
        msg
      }
      def getStatusMessage(status: Int): String = {
        var msg = status match {
          case 200 => "ok"
          case 500 => "error"
          case _   => throw new Exception(s"$status was unexpected")
        }
        println(s"Returning '$msg' for: $status")
        msg
      }





//- section
//-   h1 What's Covered
//-   ol 
//-     li Types &amp; Data
//-     li Values and Variables
//-     li Collections
//-     li Expressions
//-     li Functions
//-     li Higher Order Collections
//-     li Case Classes
//-     li Party

//- section
//-   h2 Now get busy

//- section
//-   h1 THE END
//-   h3 THanks!
